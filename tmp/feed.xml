<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-03-26T17:00:00-07:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Group Project - A Chess Game</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/27/Group_project_chess_game.html"/>
    <id>http://blog.url.com/2015/03/27/Group_project_chess_game.html</id>
    <published>2015-03-26T17:00:00-07:00</published>
    <updated>2015-03-28T22:40:44-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My Firehose team project kicked off last week. Our goal is to build a chess game. Today, I just had the second virtual meeting with my teammates. Although the first week was not very exciting because we were just trying to get everything set up, I learned how to use some advanced GitHub skills to collaborate with others, such as, branches and pull requests. &lt;/p&gt;

&lt;p&gt;I was assigned to add a front-end framework to our repository last week. After adding the Bootstrap, I pushed my code to a new branch and made a pull request so that other team members were able to do a code review. However, there was a merge conflict after my pull request. The reason was I did not update my branch from the master branch after one of the team members pushed his code to master. Both of us edited the same line in the Gemfile, so GitHub was confused which version it should accept. In this case, we wanted to keep both because we were trying to add a devise gem and the Bootstrap framwork to the Gemfile. However, this may not always be the case in the future because there might be bugs or a team member deleted others' code accidentally. Creating pull requests allow all members to get involved and review the changes before they are merged into master branch. It is important for me to build good habits on the first day before things get complicated&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Recursive + Memorization</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/25/Recursive_memorization.html"/>
    <id>http://blog.url.com/2015/03/25/Recursive_memorization.html</id>
    <published>2015-03-24T17:00:00-07:00</published>
    <updated>2015-03-26T09:54:05-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Last week, I solved the Fibonacci problem in three ways. The first way was simply storing each sequence in an array. The second way was using recursion. The third way was similiar to the first one. Since I calculated the sequence from the bottom, so instead of storing all previous sequences, the array only stored only last two previous elements because only these two elements were needed in order to calculate a new sequence. Although the recursion method was straight foward, the run time was exponential, which was very slow because we need to calculate from fibo(n-1) to fibo(1) in every recursion call.&lt;/p&gt;

&lt;p&gt;To solve this problem, I learned a new algorithm called memorization. I created an empty hash, memo, which stores all the calculated Fibonacci numbers. If a Fibonacci sequence has never been calculated, I will not only calculate it, but also store it to the hash for future use. Therefore, I do not need to calculate all the terms again. If a particular term is already in memo, we can just get the value from memo. This is very efficient. If we ignore the recursion, then the running time for in the Fibonacci function will be constant. The time will only depend on how many unmemorized terms, which is n, so the running time is linear, O(n)&lt;/p&gt;

&lt;p&gt;My mentor in Firehose Project also suggested another algorithm, which is storing the current Fibonacci sequence at some point if we do not have enough memory to store all terms. I am still working on it and hopefully I can finish it today.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An Alternative to Twitter Bootstrap</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/24/Bourbon.html"/>
    <id>http://blog.url.com/2015/03/24/Bourbon.html</id>
    <published>2015-03-23T17:00:00-07:00</published>
    <updated>2015-03-24T22:36:57-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I started learning a new front-end framework, Bourbon this week. I used what I learned to create this blog. To start, I watched phpacademy's tutorial on Youtube, &lt;a href="https://www.youtube.com/watch?v=8ItNE_DX6Cc"&gt;How to make your CSS awesome with Bourbon, Neat, Bitters and Refills!&lt;/a&gt;. In the video, Travis used the good example of Avengers to describe what Bourbon is. If Bourbon were the American Captain, then Neat, Bitters and Refills would be Thor, Iron Man and Hulk. &lt;/p&gt;

&lt;p&gt;So what is Bourbon? Bourbon is just a mixins library for sass. Unlike Bootstrap, it will not install pre-defined classes to websites, so the appearance of websites will not change until we apply the mixins. We will have more control on what will be actually added. The mixins allow users to write DRY code, on the other words, less code, but achieve the same results as CSS. It is not very powerful though, so we need others members in the Averagers team, Neat. &lt;/p&gt;

&lt;p&gt;Neat is a grid-system built on Bourbon. It allows users to create an responsive website easily. It divides a page into 12 columns, 4 columns for mobile sites. For example, By simply calling @include outer-container, the content will be centered accordingly. If you want to divide a page into 2 sectons that have the same size, you can call @include span-columns(6) on each class, which means each class spans 6 columns.&lt;/p&gt;

&lt;p&gt;If you still want the pre-defined style, Bourbon has Bitters, which provides necessary variables, styles, structures, forms and grid settings. Lastly, in order to add some super power, we need Refills. Refills provides components, such as, footers, navigation-bars, hero-section, etc. They are all available on Refills website, so users can just copy and paste them on their websites. This is the biggest advantage of Bourbon. Users only take the components they need, so when users try to customize the websites, pre-defined classes will not get in the way and produce unpredictable results.&lt;/p&gt;

&lt;p&gt;Some people may ask- Does that mean Bourbon is better than Bootstrap? It depends. They both have their pros and cons. On the one hand, Bourbon provides the flexibility for designers to tailor websites. On the other hand, Bootstrap allows designers to build websites fast. I like Bourbon a lot, but at this point, Bootstrap is still a better option for me because I want to focus on the backend.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>An Awesome UI Kit - Flat UI</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/07/FlatUI.html"/>
    <id>http://blog.url.com/2015/03/07/FlatUI.html</id>
    <published>2015-03-06T16:00:00-08:00</published>
    <updated>2015-03-26T09:51:40-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I am implementing a Udemy like online course web application, &lt;a href= "http://flixter-weng-sin.herokuapp.com"&gt;Flixter&lt;/a&gt;. I set up the assets pipeline, installed a few gems including the devise gem for the user model. After the set up, I need to consider what I need to create in my database. The most important feature is definitely the courses. There should be two types of users , instructors and students. I assumed each course only has one instructor. Therefore, in order to identify whether the current user is an instructor or a student, I can just check if the current user is the creactor of a specific course, so I migrated a course table to store all courses and created an association between the user and course model. An instructor or user if you will, can teach many courses, but a course can only have one owner. 

&lt;p&gt;I also found an awesome UI Kit called &lt;a href="http://designmodo.github.io/Flat-U"&gt;Flat UI&lt;/a&gt;, which made my web application looked a lot more appealing than what Firehose taught, which only used Twitters Bootstrap. It is a UI kit based on Bootstrap. It provides a flat design theme css and javascript files, which overwrites the default Bootstrap's style. Therefore, all Bootstrap classes can still be used, but now the website looks flat and much cleaner. I am using the free version, but if you want to use more advanced features, there is a pro version for $39.99. The default theme of Flat UI is green. I thought it looks really nice, but I cannot have all my websites and applications look green, right? So Flat UI provided a list of colors for you to customize the css file instead of using the default color, http://flatuicolors.com/. However, I haven't not figured out how to change the color on my web application yet. I think my website looks good for now, but will definitely put more time on this.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Enrolled in Firehose Project Online Coding Camp</title>
    <link rel="alternate" href="http://blog.url.com/2015/02/02/FirehoseProjectBootCamp.html"/>
    <id>http://blog.url.com/2015/02/02/FirehoseProjectBootCamp.html</id>
    <published>2015-02-01T16:00:00-08:00</published>
    <updated>2015-03-22T13:01:04-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today, I enrolled in an online coding bootcamp called Firehose Project after tons of research. I initially planned to join Bloc, but the communication between Marco, one of the cofounders of Firehose Project, gave me a lot of confidence to hop into the Firehose Project. Marco talked about the curriculum in an info session, which addressed a lot of my concerns. Their info seesions are live on YouTube, so they can answer any questions if you have questions during the info session. Antoher reason I did not choose Bloc is Bloc did not explicitly say they had a group project included in their curriculum. They did answer me I would have access to former and current students, so I could collaborate with them to do any side projects. That was great. However, I wanted a little more than that. It would be great if an instructor is here all the time to guide the group over the whole project. This is the disadvantage of online bootcamps because a lot of well-known on-site bootcamps introduce pair-programming and group projects at the early stage of a the courses. I thought that being able to work as a team is one of the most important skills for a developer. It is also a critical factor for potential employers to consider in an interview. They would rather work with a person who can blend in to their team easily than work with an individual who is really good at coding, but does not know how to communicate.
&lt;/p&gt;

&lt;p&gt;One thing I like Firehose Project is that they are going to teach you the essential computer science skills. After the info session, I started their Pre-work. I was able to see the curriculum in my user page. I saw there was a tab called, coding challenges, which needed students to write plain Ruby code. Those coding challenges included Linked List, Sorting and other cool stuffs. I did most of them in a computer science class in college, but I implemented them in C++.&lt;/p&gt;

&lt;p&gt;Last but not least, Ken, another cofounder of Firehose Project, was extremely helpful. He answered whatever coding questions I came up during the Pre-work process. In Firehose Project's Pre-work, they suggested the website, Learn Ruby the Hard Way, for pre-students to get used to Ruby syntax. The website is very useful. I thought Ruby Primer is also very useful because it explains some of the concepts, for example, class, objects, methods, etc. clearly. Having that said, I believed the Firehose Project should be the right bootcamp. After a week of preparation, I solved two coding challenges and finally became a Firehoser. I am looking forward to building some Rails apps !!
&lt;/p&gt;</content>
  </entry>
</feed>
